{ PrimaryExpression,  "this" , 	ObjectLiteral , ABRE_BLOCO, TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, FECHA_BLOCO}; , 	Identifier , 	ArrayLiteral , 	Literal };
{ Literal,  ABRE_BLOCO, <DECIMAL_LITERAL> , <HEX_INTEGER_LITERAL> , <STRING_LITERAL> , <BOOLEAN_LITERAL> , <NULL_LITERAL> , <REGULAR_EXPRESSION_LITERAL> ,FECHA_BLOCO};
{ Identifier,  <IDENTIFIER_NAME>
{ ArrayLiteral,  "[" ,ABRE_BLOCO, ABRE_BLOCO, Elision ,FECHA_BLOCO, OPCIONAL, "]" , ElementList, Elision "]" , ABRE_BLOCO, ElementList ,FECHA_BLOCO, OPCIONAL, "]" ,FECHA_BLOCO};
{ ElementList,  ABRE_BLOCO, Elision ,FECHA_BLOCO, OPCIONAL, AssignmentExpression ,ABRE_BLOCO, Elision, AssignmentExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ Elision,  ABRE_BLOCO, "," ,FECHA_BLOCO,REP_MAIS};
{ ObjectLiteral,  "{" ,ABRE_BLOCO, PropertyNameAndValueList ,FECHA_BLOCO, OPCIONAL, "}" };
{ PropertyNameAndValueList,  PropertyNameAndValue ,ABRE_BLOCO, "," PropertyNameAndValue , "," ,FECHA_BLOCO,REP_ASTERISCO};
{ PropertyNameAndValue,  PropertyName ":" AssignmentExpression };
{ PropertyName,  Identifier , 	<STRING_LITERAL> , 	<DECIMAL_LITERAL>
{ MemberExpression,  ABRE_BLOCO, ABRE_BLOCO, FunctionExpression , PrimaryExpression ,FECHA_BLOCO, ABRE_BLOCO, MemberExpressionPart ,FECHA_BLOCO,REP_ASTERISCO, FECHA_BLOCO, 	AllocationExpression };
{ MemberExpressionForIn,  ABRE_BLOCO, ABRE_BLOCO, FunctionExpression , PrimaryExpression ,FECHA_BLOCO, ABRE_BLOCO, MemberExpressionPart ,FECHA_BLOCO,REP_ASTERISCO, FECHA_BLOCO};
{ AllocationExpression,  ABRE_BLOCO, "new" MemberExpression ,ABRE_BLOCO, ABRE_BLOCO, Arguments ,ABRE_BLOCO, MemberExpressionPart ,FECHA_BLOCO,REP_ASTERISCO, FECHA_BLOCO,REP_ASTERISCO, FECHA_BLOCO, FECHA_BLOCO};
{ MemberExpressionPart,  ABRE_BLOCO, "[" Expression "]" ,FECHA_BLOCO , ABRE_BLOCO, "." Identifier ,FECHA_BLOCO};
{ CallExpression,  MemberExpression, Arguments ,ABRE_BLOCO, CallExpressionPart ,FECHA_BLOCO,REP_ASTERISCO};
{ CallExpressionForIn,  MemberExpressionForIn, Arguments ,ABRE_BLOCO, CallExpressionPart ,FECHA_BLOCO,REP_ASTERISCO};
{ CallExpressionPart,  Arguments, ABRE_BLOCO, "[" Expression "]" ,FECHA_BLOCO};, ABRE_BLOCO, "." Identifier ,FECHA_BLOCO};
{ Arguments,  TOKEN_ABRE_PARENTESE, ABRE_BLOCO, ArgumentList ,FECHA_BLOCO, OPCIONAL, TOKEN_FECHA_PARENTESE};
{ ArgumentList,  AssignmentExpression ,ABRE_BLOCO, "," AssignmentExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ LeftHandSideExpression,  CallExpression , 	MemberExpression };
{ LeftHandSideExpressionForIn,  CallExpressionForIn , 	MemberExpressionForIn };
{ PostfixExpression,  LeftHandSideExpression ,ABRE_BLOCO, PostfixOperator ,FECHA_BLOCO, OPCIONAL};
{ PostfixOperator,  ABRE_BLOCO, "++" , "--" ,FECHA_BLOCO};
{ UnaryExpression,  ABRE_BLOCO, PostfixExpression , ABRE_BLOCO, UnaryOperator, UnaryExpression ,FECHA_BLOCO,REP_MAIS, FECHA_BLOCO};
{ UnaryOperator,  ABRE_BLOCO, "delete" , "void" , "typeof" , "++" , "--" , "+" , "-" , "~" , "!" ,FECHA_BLOCO};
{ MultiplicativeExpression,  UnaryExpression ,ABRE_BLOCO, MultiplicativeOperator, UnaryExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ MultiplicativeOperator,  ABRE_BLOCO, "*" , <SLASH> , "%" ,FECHA_BLOCO};
{ AdditiveExpression,  MultiplicativeExpression ,ABRE_BLOCO, AdditiveOperator, MultiplicativeExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ AdditiveOperator,  ABRE_BLOCO, "+" , "-" ,FECHA_BLOCO};
{ ShiftExpression,  AdditiveExpression ,ABRE_BLOCO, ShiftOperator, AdditiveExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ ShiftOperator,  ABRE_BLOCO, "<<" , ">>" , ">>>" ,FECHA_BLOCO};
{ RelationalExpression,  ShiftExpression ,ABRE_BLOCO, RelationalOperator, ShiftExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ RelationalOperator,  ABRE_BLOCO, "<" , ">" , "<=" , ">=" , "instanceof" , "in" ,FECHA_BLOCO};
{ RelationalExpressionNoIn,  ShiftExpression ,ABRE_BLOCO, RelationalNoInOperator, ShiftExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ RelationalNoInOperator,  ABRE_BLOCO, "<" , ">" , "<=" , ">=" , "instanceof" ,FECHA_BLOCO};
{ EqualityExpression,  RelationalExpression ,ABRE_BLOCO, EqualityOperator, RelationalExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ EqualityExpressionNoIn,  RelationalExpressionNoIn ,ABRE_BLOCO, EqualityOperator, RelationalExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ EqualityOperator,  ABRE_BLOCO, "==" , "!=" , "===" , "!==" ,FECHA_BLOCO};
{ BitwiseANDExpression,  EqualityExpression ,ABRE_BLOCO, BitwiseANDOperator, EqualityExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseANDExpressionNoIn,  EqualityExpressionNoIn ,ABRE_BLOCO, BitwiseANDOperator, EqualityExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseANDOperator,  "&" };
{ BitwiseXORExpression,  BitwiseANDExpression ,ABRE_BLOCO, BitwiseXOROperator, BitwiseANDExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseXORExpressionNoIn,  BitwiseANDExpressionNoIn ,ABRE_BLOCO, BitwiseXOROperator, BitwiseANDExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseXOROperator,  "^" };
{ BitwiseORExpression,  BitwiseXORExpression ,ABRE_BLOCO, BitwiseOROperator, BitwiseXORExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseORExpressionNoIn,  BitwiseXORExpressionNoIn ,ABRE_BLOCO, BitwiseOROperator, BitwiseXORExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ BitwiseOROperator,  "|" };
{ LogicalANDExpression,  BitwiseORExpression ,ABRE_BLOCO, LogicalANDOperator, BitwiseORExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ LogicalANDExpressionNoIn,  BitwiseORExpressionNoIn ,ABRE_BLOCO, LogicalANDOperator, BitwiseORExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ LogicalANDOperator,  "&&" };
{ LogicalORExpression,  LogicalANDExpression ,ABRE_BLOCO, LogicalOROperator, LogicalANDExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ LogicalORExpressionNoIn,  LogicalANDExpressionNoIn ,ABRE_BLOCO, LogicalOROperator, LogicalANDExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ LogicalOROperator,  "||" };
{ ConditionalExpression,  LogicalORExpression ,ABRE_BLOCO, TOKEN_INTERRORACAO, AssignmentExpression ":" AssignmentExpression ,FECHA_BLOCO, OPCIONAL};
{ ConditionalExpressionNoIn,  LogicalORExpressionNoIn ,ABRE_BLOCO, TOKEN_INTERRORACAO, AssignmentExpression ":" AssignmentExpressionNoIn ,FECHA_BLOCO, OPCIONAL};
{ AssignmentExpression,  ABRE_BLOCO, LeftHandSideExpression, AssignmentOperator, AssignmentExpression , ConditionalExpression ,FECHA_BLOCO};
{ AssignmentExpressionNoIn,  ABRE_BLOCO, LeftHandSideExpression, AssignmentOperator, AssignmentExpressionNoIn , ConditionalExpressionNoIn ,FECHA_BLOCO};
{ AssignmentOperator,  ABRE_BLOCO, "=" , "*=" , <SLASHASSIGN> , "%=" , "+=" , "-=" , "<<=" , ">>=" , ">>>=" , "&=" , "^=" , "|=" ,FECHA_BLOCO};
{ Expression,  AssignmentExpression ,ABRE_BLOCO, "," AssignmentExpression ,FECHA_BLOCO,REP_ASTERISCO};
{ ExpressionNoIn,  AssignmentExpressionNoIn ,ABRE_BLOCO, "," AssignmentExpressionNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ Statement,  Block , 	JScriptVarStatement, 	VariableStatement , 	EmptyStatement , 	LabelledStatement , 	ExpressionStatement , 	IfStatement , 	IterationStatement , 	ContinueStatement , 	BreakStatement , 	ImportStatement , 	ReturnStatement , 	WithStatement , 	SwitchStatement , 	ThrowStatement , 	TryStatement };
{ Block,  "{" ,ABRE_BLOCO, StatementList ,FECHA_BLOCO, OPCIONAL, "}" };
{ StatementList,  ABRE_BLOCO, Statement ,FECHA_BLOCO,REP_MAIS};
{ VariableStatement,  "var" VariableDeclarationList ,ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ VariableDeclarationList,  VariableDeclaration ,ABRE_BLOCO, "," VariableDeclaration ,FECHA_BLOCO,REP_ASTERISCO};
{ VariableDeclarationListNoIn,  VariableDeclarationNoIn ,ABRE_BLOCO, "," VariableDeclarationNoIn ,FECHA_BLOCO,REP_ASTERISCO};
{ VariableDeclaration,  Identifier ,ABRE_BLOCO, Initialiser ,FECHA_BLOCO, OPCIONAL};
{ VariableDeclarationNoIn,  Identifier ,ABRE_BLOCO, InitialiserNoIn ,FECHA_BLOCO, OPCIONAL};
{ Initialiser,  "=" AssignmentExpression };
{ InitialiserNoIn,  "=" AssignmentExpressionNoIn };
{ EmptyStatement,  ";" };
{ ExpressionStatement,  Expression ,ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ IfStatement,  "if" ,TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, Statement ,ABRE_BLOCO, "else" Statement ,FECHA_BLOCO, OPCIONAL};
{ IterationStatement,  ABRE_BLOCO, "do" Statement "while" ,TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL, FECHA_BLOCO , ABRE_BLOCO, "while" ,TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, Statement ,FECHA_BLOCO , ABRE_BLOCO, "for" ,TOKEN_ABRE_PARENTESE, ABRE_BLOCO, ExpressionNoIn ,FECHA_BLOCO, OPCIONAL, ";" ,ABRE_BLOCO, Expression ,FECHA_BLOCO, OPCIONAL, ";" ,ABRE_BLOCO, Expression ,FECHA_BLOCO, OPCIONAL, TOKEN_FECHA_PARENTESE, Statement ,FECHA_BLOCO , ABRE_BLOCO, "for" ,TOKEN_ABRE_PARENTESE, "var" VariableDeclarationList ";" ,ABRE_BLOCO, Expression ,FECHA_BLOCO, OPCIONAL, ";" ,ABRE_BLOCO, Expression ,FECHA_BLOCO, OPCIONAL, TOKEN_FECHA_PARENTESE, Statement ,FECHA_BLOCO , ABRE_BLOCO, "for" ,TOKEN_ABRE_PARENTESE, "var" VariableDeclarationNoIn "in" Expression ,TOKEN_FECHA_PARENTESE, Statement ,FECHA_BLOCO , ABRE_BLOCO, "for" ,TOKEN_ABRE_PARENTESE, LeftHandSideExpressionForIn "in" Expression ,TOKEN_FECHA_PARENTESE, Statement ,FECHA_BLOCO};
{ ContinueStatement,  "continue" ,ABRE_BLOCO, Identifier ,FECHA_BLOCO, OPCIONAL, ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ BreakStatement,  "break" ,ABRE_BLOCO, Identifier ,FECHA_BLOCO, OPCIONAL, ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ ReturnStatement,  "return" ,ABRE_BLOCO, Expression ,FECHA_BLOCO, OPCIONAL, ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ WithStatement,  "with" ,TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, Statement };
{ SwitchStatement,  "switch" ,TOKEN_ABRE_PARENTESE, Expression ,TOKEN_FECHA_PARENTESE, CaseBlock };
{ CaseBlock,  "{" ,ABRE_BLOCO, CaseClauses ,FECHA_BLOCO, OPCIONAL, ABRE_BLOCO, "}" , DefaultClause ,ABRE_BLOCO, CaseClauses ,FECHA_BLOCO, OPCIONAL, "}" ,FECHA_BLOCO};
{ CaseClauses,  ABRE_BLOCO, CaseClause ,FECHA_BLOCO,REP_MAIS};
{ CaseClause,  ABRE_BLOCO, ABRE_BLOCO, "case" Expression ":" ,FECHA_BLOCO, FECHA_BLOCO, ABRE_BLOCO, StatementList ,FECHA_BLOCO, OPCIONAL};
{ DefaultClause,  ABRE_BLOCO, ABRE_BLOCO, "default" ":" ,FECHA_BLOCO, FECHA_BLOCO, ABRE_BLOCO, StatementList ,FECHA_BLOCO, OPCIONAL};
{ LabelledStatement,  Identifier ":" Statement };
{ ThrowStatement,  "throw" Expression ,ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ TryStatement,  "try" Block ,ABRE_BLOCO, ABRE_BLOCO, Finally , Catch ,ABRE_BLOCO, Finally ,FECHA_BLOCO, OPCIONAL, FECHA_BLOCO, FECHA_BLOCO};
{ Catch,  "catch" ,TOKEN_ABRE_PARENTESE, Identifier ,TOKEN_FECHA_PARENTESE, Block };
{ Finally,  "finally" Block };
{ FunctionDeclaration,  "function" Identifier ,ABRE_BLOCO, TOKEN_ABRE_PARENTESE, ABRE_BLOCO, FormalParameterList ,FECHA_BLOCO, OPCIONAL, TOKEN_FECHA_PARENTESE, FECHA_BLOCO, FunctionBody };
{ FunctionExpression,  "function" ,ABRE_BLOCO, Identifier ,FECHA_BLOCO, OPCIONAL, ABRE_BLOCO, TOKEN_ABRE_PARENTESE, ABRE_BLOCO, FormalParameterList ,FECHA_BLOCO, OPCIONAL, TOKEN_FECHA_PARENTESE, FECHA_BLOCO, FunctionBody };
{ FormalParameterList,  Identifier ,ABRE_BLOCO, "," Identifier ,FECHA_BLOCO,REP_ASTERISCO};
{ FunctionBody,  "{" ,ABRE_BLOCO, SourceElements ,FECHA_BLOCO, OPCIONAL, "}" };
{ Program,  ABRE_BLOCO, SourceElements ,FECHA_BLOCO, OPCIONAL, <EOF>
{ SourceElements,  ABRE_BLOCO, SourceElement ,FECHA_BLOCO,REP_MAIS};
{ SourceElement,  FunctionDeclaration , 	Statement };
{ ImportStatement,  "import" Name ,ABRE_BLOCO, "." "*" ,FECHA_BLOCO, OPCIONAL, ";" };
{ Name,  <IDENTIFIER_NAME> ,ABRE_BLOCO, "." <IDENTIFIER_NAME> ,FECHA_BLOCO,REP_ASTERISCO};
{ JScriptVarStatement,  "var" JScriptVarDeclarationList ,ABRE_BLOCO, ";" ,FECHA_BLOCO, OPCIONAL};
{ JScriptVarDeclarationList,  JScriptVarDeclaration ,ABRE_BLOCO, "," JScriptVarDeclaration ,FECHA_BLOCO,REP_ASTERISCO};
{ JScriptVarDeclaration,  Identifier ":" <IDENTIFIER_NAME> ,ABRE_BLOCO, Initialiser ,FECHA_BLOCO, OPCIONAL};
{ insertSemiColon,  java, code };
